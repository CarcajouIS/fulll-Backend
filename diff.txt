diff --git a/src/App/FleetManagementService.ts b/src/App/FleetManagementService.ts
index 906a746..3d78c54 100644
--- a/src/App/FleetManagementService.ts
+++ b/src/App/FleetManagementService.ts
@@ -10,7 +10,7 @@ class FleetManagementService {
      */
     async createFleet(userId: string, fleetId?: string): Promise<Fleet> {
         const fleet = await new commands.CreateFleetCommand({fleetId, userId}).execute();
-        DomainEvents.publish(new events.FleetCreatedEvent(fleet));
+        DomainEvents.publish(new events.FleetCreatedEvent({fleet}));
         return fleet;
     }
 
@@ -19,7 +19,7 @@ class FleetManagementService {
      */
     async createVehicle(plateNumber: string): Promise<Vehicle> {
         const vehicle = await new commands.CreateVehicleCommand({plateNumber}).execute();
-        DomainEvents.publish(new events.VehicleCreatedEvent(vehicle));
+        DomainEvents.publish(new events.VehicleCreatedEvent({vehicle}));
         return vehicle;
     }
 
@@ -28,7 +28,7 @@ class FleetManagementService {
      */
     async deleteFleet(fleetId: string): Promise<void> {
         await new commands.DeleteFleetCommand({fleetId}).execute();
-        DomainEvents.publish(new events.FleetDeletedEvent(fleetId));
+        DomainEvents.publish(new events.FleetDeletedEvent({id: fleetId}));
     }
 
     /**
@@ -36,7 +36,7 @@ class FleetManagementService {
      */
     async deleteVehicle(plateNumber: string): Promise<void> {
         await new commands.DeleteVehicleCommand({plateNumber}).execute();
-        DomainEvents.publish(new events.VehicleDeletedEvent({plateNumber}));
+        DomainEvents.publish(new events.VehicleDeletedEvent({id: plateNumber}));
     }
 
     /**
@@ -45,7 +45,7 @@ class FleetManagementService {
     async registerVehicle(fleet: Fleet, vehicle: Vehicle): Promise<Fleet> {
         await fleet.addVehicle(vehicle);
         await new commands.RegisterVehicleCommand(fleet, vehicle).execute();
-        DomainEvents.publish(new events.VehicleRegisteredEvent(fleet, vehicle));
+        DomainEvents.publish(new events.VehicleRegisteredEvent({fleet, vehicle}));
         return fleet;
     }
 
@@ -55,7 +55,7 @@ class FleetManagementService {
     async parkVehicle(vehicle: Vehicle, location: Location): Promise<Location> {
         const loc = await vehicle.parkAt(location);
         await new commands.ParkVehicleCommand(vehicle, location).execute();
-        DomainEvents.publish(new events.VehicleParkedEvent(vehicle, location));
+        DomainEvents.publish(new events.VehicleParkedEvent({vehicle, location}));
         return loc;
     }
 
diff --git a/src/Domain/Events/FleetCreatedEvent.ts b/src/Domain/Events/FleetCreatedEvent.ts
index 49bbc6e..aae605b 100644
--- a/src/Domain/Events/FleetCreatedEvent.ts
+++ b/src/Domain/Events/FleetCreatedEvent.ts
@@ -1,9 +1,11 @@
+import {Fleet} from "../Model/index.js";
+
 class FleetCreatedEvent {
-    constructor(private readonly _fleet: Fleet) {
+    constructor(private readonly _params: { fleet: Fleet }) {
     }
 
-    get fleet(): Fleet {
-        return this._fleet;
+    get params() {
+        return this._params;
     }
 }
 
diff --git a/src/Domain/Events/FleetDeletedEvent.ts b/src/Domain/Events/FleetDeletedEvent.ts
index f7d5e53..40326a1 100644
--- a/src/Domain/Events/FleetDeletedEvent.ts
+++ b/src/Domain/Events/FleetDeletedEvent.ts
@@ -1,9 +1,9 @@
 class FleetDeletedEvent {
-    constructor(private readonly _fleet: Fleet) {
+    constructor(private readonly _params: { id: string }) {
     }
 
-    get fleet(): Fleet {
-        return this._fleet;
+    get params() {
+        return this._params;
     }
 }
 
diff --git a/src/Domain/Events/Handlers/FleetCreatedEventHandler.ts b/src/Domain/Events/Handlers/FleetCreatedEventHandler.ts
index 59a9ced..a16a16f 100644
--- a/src/Domain/Events/Handlers/FleetCreatedEventHandler.ts
+++ b/src/Domain/Events/Handlers/FleetCreatedEventHandler.ts
@@ -1,9 +1,9 @@
 import {FleetCreatedEvent} from "../FleetCreatedEvent.js";
 
 class FleetCreatedEventHandler {
-    handle(event: FleetCreatedEvent): void {
+    handle({params: {fleet: {id, userId}}}: FleetCreatedEvent): void {
         // Log the event
-        console.log(`Fleet with id ${event.fleet.fleetId} created by user ${event.fleet.userId}`);
+        console.log(`Fleet with id ${id} created by user ${userId}`);
     }
 }
 
diff --git a/src/Domain/Events/Handlers/FleetDeletedEventHandler.ts b/src/Domain/Events/Handlers/FleetDeletedEventHandler.ts
index 3e54946..7b10c8f 100644
--- a/src/Domain/Events/Handlers/FleetDeletedEventHandler.ts
+++ b/src/Domain/Events/Handlers/FleetDeletedEventHandler.ts
@@ -1,9 +1,9 @@
 import {FleetDeletedEvent} from "../FleetDeletedEvent.js";
 
 class FleetDeletedEventHandler {
-    handle(event: FleetDeletedEvent): void {
+    handle({params: {id}}: FleetDeletedEvent): void {
         // Log the event
-        console.log(`Fleet with id ${event.fleet.fleetId} deleted`);
+        console.log(`Fleet with id ${id} deleted`);
     }
 }
 
diff --git a/src/Domain/Events/Handlers/VehicleCreatedEventHandler.ts b/src/Domain/Events/Handlers/VehicleCreatedEventHandler.ts
index d12c693..9822831 100644
--- a/src/Domain/Events/Handlers/VehicleCreatedEventHandler.ts
+++ b/src/Domain/Events/Handlers/VehicleCreatedEventHandler.ts
@@ -1,9 +1,9 @@
 import {VehicleCreatedEvent} from "../VehicleCreatedEvent.js";
 
 class VehicleCreatedEventHandler {
-    handle(event: VehicleCreatedEvent): void {
+    handle({params: {vehicle: {id}}}: VehicleCreatedEvent): void {
         // Log the event
-        console.log(`Vehicle with plate number ${event.vehicle.plateNumber} created`);
+        console.log(`Vehicle with plate number ${id} created`);
     }
 }
 
diff --git a/src/Domain/Events/Handlers/VehicleDeletedEventHandler.ts b/src/Domain/Events/Handlers/VehicleDeletedEventHandler.ts
index fc60d6f..9fca329 100644
--- a/src/Domain/Events/Handlers/VehicleDeletedEventHandler.ts
+++ b/src/Domain/Events/Handlers/VehicleDeletedEventHandler.ts
@@ -3,7 +3,7 @@ import {VehicleDeletedEvent} from "../VehicleDeletedEvent.js";
 class VehicleDeletedEventHandler {
     handle(event: VehicleDeletedEvent): void {
         // Log the event
-        console.log(`Vehicle with plate number ${event.vehicle.plateNumber} deleted`);
+        console.log(`Vehicle with plate number ${event.params.id} deleted`);
     }
 }
 
diff --git a/src/Domain/Events/Handlers/VehicleParkedEventHandler.ts b/src/Domain/Events/Handlers/VehicleParkedEventHandler.ts
index 5e58bfe..11ea67b 100644
--- a/src/Domain/Events/Handlers/VehicleParkedEventHandler.ts
+++ b/src/Domain/Events/Handlers/VehicleParkedEventHandler.ts
@@ -1,9 +1,9 @@
 import {VehicleParkedEvent} from "../VehicleParkedEvent.js";
 
 class VehicleParkedEventHandler {
-    handle(event: VehicleParkedEvent): void {
+    handle({params: {vehicle, location}}: VehicleParkedEvent): void {
         // Log the event
-        console.log(`Vehicle with plate number ${event.vehicle.plateNumber} parked at ${event.location.latitude}, ${event.location.longitude}`);
+        console.log(`Vehicle with plate number ${vehicle.id} parked at ${JSON.stringify(location)}`);
     }
 }
 
diff --git a/src/Domain/Events/Handlers/VehicleRegisteredEventHandler.ts b/src/Domain/Events/Handlers/VehicleRegisteredEventHandler.ts
index f590879..ea96392 100644
--- a/src/Domain/Events/Handlers/VehicleRegisteredEventHandler.ts
+++ b/src/Domain/Events/Handlers/VehicleRegisteredEventHandler.ts
@@ -1,9 +1,9 @@
 import {VehicleRegisteredEvent} from "../VehicleRegisteredEvent.js";
 
 class VehicleRegisteredEventHandler {
-    handle({fleet, vehicle}: VehicleRegisteredEvent): void {
+    handle({params: {fleet, vehicle}}: VehicleRegisteredEvent): void {
         // Log the event
-        console.log(`Vehicle with plate number ${vehicle.plateNumber} registered to fleet ${fleet.fleetId}`);
+        console.log(`Vehicle with plate number ${vehicle.id} registered to fleet ${fleet.id}`);
     }
 }
 
diff --git a/src/Domain/Events/VehicleCreatedEvent.ts b/src/Domain/Events/VehicleCreatedEvent.ts
index 0e1e430..89675d5 100644
--- a/src/Domain/Events/VehicleCreatedEvent.ts
+++ b/src/Domain/Events/VehicleCreatedEvent.ts
@@ -1,9 +1,11 @@
+import {Vehicle} from "../Model/index.js";
+
 class VehicleCreatedEvent {
-    constructor(private readonly _vehicle: Vehicle) {
+    constructor(private readonly _params: { vehicle: Vehicle }) {
     }
 
-    get vehicle(): Vehicle {
-        return this._vehicle;
+    get params() {
+        return this._params;
     }
 
 }
diff --git a/src/Domain/Events/VehicleDeletedEvent.ts b/src/Domain/Events/VehicleDeletedEvent.ts
index 923fb96..34aed9b 100644
--- a/src/Domain/Events/VehicleDeletedEvent.ts
+++ b/src/Domain/Events/VehicleDeletedEvent.ts
@@ -1,9 +1,9 @@
 class VehicleDeletedEvent {
-    constructor(private readonly _vehicle: Vehicle) {
+    constructor(private readonly _params: { id: string; }) {
     }
 
-    get vehicle(): Vehicle {
-        return this._vehicle;
+    get params() {
+        return this._params;
     }
 }
 
diff --git a/src/Domain/Events/VehicleParkedEvent.ts b/src/Domain/Events/VehicleParkedEvent.ts
index c6a0108..a1a0a54 100644
--- a/src/Domain/Events/VehicleParkedEvent.ts
+++ b/src/Domain/Events/VehicleParkedEvent.ts
@@ -1,15 +1,11 @@
-import {Location, Vehicle} from "../Model";
+import {Location, Vehicle} from "../Model/index.js";
 
 class VehicleParkedEvent {
-    constructor(private readonly _vehicle: Vehicle, private readonly _location: Location) {
+    constructor(private readonly _params: { vehicle: Vehicle, location: Location }) {
     }
 
-    get vehicle(): Vehicle {
-        return this._vehicle;
-    }
-
-    get location(): Location {
-        return this._location;
+    get params() {
+        return this._params;
     }
 }
 
diff --git a/src/Domain/Events/VehicleRegisteredEvent.ts b/src/Domain/Events/VehicleRegisteredEvent.ts
index 53f3da7..05caad6 100644
--- a/src/Domain/Events/VehicleRegisteredEvent.ts
+++ b/src/Domain/Events/VehicleRegisteredEvent.ts
@@ -1,15 +1,11 @@
 import {Fleet, Vehicle} from "../Model/index.js";
 
 class VehicleRegisteredEvent {
-    constructor(private readonly _fleet: Fleet, private readonly _vehicle: Vehicle) {
+    constructor(private readonly _params: { fleet: Fleet, vehicle: Vehicle }) {
     }
 
-    get fleet(): Fleet {
-        return this._fleet;
-    }
-
-    get vehicle(): Vehicle {
-        return this._vehicle;
+    get params() {
+        return this._params;
     }
 }
 
diff --git a/src/Domain/Model/Location.ts b/src/Domain/Model/Location.ts
index 943a00b..90f3137 100644
--- a/src/Domain/Model/Location.ts
+++ b/src/Domain/Model/Location.ts
@@ -18,4 +18,5 @@ export class Location {
     equals(other: Location): boolean {
         return this.latitude === other?.latitude && this.longitude === other?.longitude && this.altitude === other?.altitude;
     }
+
 }
diff --git a/src/Domain/Model/Vehicle.ts b/src/Domain/Model/Vehicle.ts
index a3b9e4e..018f29d 100644
--- a/src/Domain/Model/Vehicle.ts
+++ b/src/Domain/Model/Vehicle.ts
@@ -1,13 +1,8 @@
 import {Fleet, Location} from "./index.js";
-import {Column, Entity, ManyToMany, PrimaryColumn} from "typeorm";
 
-@Entity()
 export class Vehicle {
-    @PrimaryColumn("varchar")
     plateNumber: string;
-    @Column("json", {nullable: true})
     currentLocation: Location = new Location(null, null, null);
-    @ManyToMany(() => Fleet, fleet => fleet.vehicles)
     fleets!: Fleet[];
 
     constructor(plateNumber: string) {
diff --git a/tsconfig.json b/tsconfig.json
index 4f93412..8aed5ad 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,7 +1,7 @@
 {
   "compilerOptions": {
     "target": "ESNext",
-    "module": "ESNext",
+    "module": "NodeNext",
     "moduleResolution": "NodeNext",
     "emitDecoratorMetadata": true,
     "experimentalDecorators": true,
